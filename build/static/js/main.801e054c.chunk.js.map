{"version":3,"sources":["Components/NavBar.js","Components/Search.js","Components/Result.js","Components/Results.js","Components/Trending.js","Components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","Search","recherche","search","type","placeholder","onChange","onKeyPress","console","log","Result","result","openpopup","onClick","e","id","src","poster_path","alt","title","overview","slice","release_date","split","vote_average","Results","results","key","map","Trending","trends","trend","backdrop_path","Popup","selected","tagline","genres","genre","name","App","useState","s","state","setState","axios","then","data","prevState","maRecherche","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.801e054c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './NavBar.css'\r\n// import Search from './Search'\r\n\r\nfunction NavBar(){\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-dark mb-3\">\r\n            <a className=\"navbar-brand\" href=\"./index.html\">AllMovies</a>\r\n            {/* <Search recherche={recherche} search={search}/> */}\r\n\r\n    </nav>\r\n  )\r\n}\r\n   \r\n  export default NavBar;","import React from 'react'\r\nimport './Search.css'\r\n\r\nfunction Search({recherche, search}){\r\n    return(\r\n        <div className=\"search \">\r\n            <input type=\"text\" \r\n            placeholder=\"Rechercher un film\" \r\n            className=\"form-control ml-2\" \r\n            onChange={recherche} \r\n            //quand on presse la touche entrer cela déclenche la fonction\r\n            onKeyPress={search}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n// on exporte le input et les paramètres qui lui permettent de fonctionner\r\nexport default Search;\r\nconsole.log(Search)","import React from 'react'\r\nimport './Result.css'\r\n// fonction détails du film : 1 résultat\r\nfunction Result({result, openpopup}){\r\n    // Result à besoin de la var 'result'\r\n    var urlImg = \"https://image.tmdb.org/t/p/w500\";\r\n\r\n    return(\r\n        \r\n        //au click sur le film voulu, cela déclench un évènement, ouvrir la popup avec comme id result.id\r\n        <div className=\" d-flex align-items-center rowFilm \" onClick={((e) => openpopup(e, result.id))}>\r\n            {/* retourne le titre du film issus de map() Results.js */}\r\n            <div className=\"listeImg ml-1\"><img src={urlImg + result.poster_path} alt={result.title} /></div>\r\n            <div className=\"ListeTitre ml-2\">{result.title}</div>\r\n            <div className=\"ListeDescription ml-1\">{result.overview.slice(0,100) + ' ...'}</div>\r\n            <div className=\"ListeDateSortie ml-1\">{result.release_date.split('-')[0]}</div>\r\n            <div className=\"ListeAvis\">{result.vote_average}</div>\r\n        </div>\r\n    );\r\n}\r\nexport default Result;\r\n","import React from 'react'\r\nimport Result from './Result'\r\nimport './Results.css'\r\n// import Axios from 'axios';\r\n\r\nfunction Results({results, openpopup}){\r\n// results prends en paramètre la variable résults\r\n    if(results !== ''){\r\n        return(\r\n        \r\n            <div className=\"results-movies\" key={results.id}>\r\n                {/* <div className=\" d-flex align-items-center rowFilm font-weight-bold\">\r\n                    <div className=\"listeImg ml-1\"></div>\r\n                    <div className=\"ListeTitre ml-2\">Titre</div>\r\n                    <div className=\"ListeDescription ml-1\">Description</div>\r\n                    <div className=\"ListeDateSortie ml-1\">Date de sortie</div>\r\n                    <div className=\"ListeAvis\">Avis</div>\r\n                </div> */}\r\n                <div > \r\n                {/* boucle sur  le tableau results de l'API*/}\r\n                {results.map(result => (\r\n                        <Result key={result.id} result={result} openpopup={openpopup}/>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    } \r\n   \r\n    \r\n}\r\nexport default Results;\r\n","import React from 'react'\r\nimport './Trending.css'\r\n\r\nfunction Trending({trends}){\r\n    var urlImg = \"https://image.tmdb.org/t/p/w500\";\r\n\r\n    return(\r\n        trends.map(trend => (\r\n        <div key={trend.id} className=\"movies\">\r\n            <div className=\"\"><img src={urlImg + trend.backdrop_path} alt={trend.title} /></div>\r\n            <div className=\"\">{trend.title}</div>\r\n        </div>\r\n        ))\r\n    )\r\n}\r\nexport default Trending;\r\n","import React from 'react'\r\nimport './Popup.css'\r\n\r\nconst urlImg = 'https://image.tmdb.org/t/p/w500'\r\nfunction Popup({selected}){\r\n    return(\r\n        <div className=\"popup row my-5\" key={selected.id}>\r\n            {/* <p className=\" col-12\">doit renvoyer les résultats pour un seul film</p> */}\r\n            <div className=\"col-12 col-md-6  my-5\">\r\n                <img src={urlImg + selected.poster_path} alt={selected.title} className=\"w-100\" />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 my-5\">\r\n                <h2>{selected.title}</h2>\r\n                <i>{selected.tagline}</i><br />\r\n                <div ><span className=\"font-weight-bold\">Genre(s) : </span> \r\n                    {selected.genres.map(genre => (\r\n                        <span key={genre.id}>{genre.name} </span>\r\n                    ))}\r\n                </div>\r\n                {/* <div>LEs crédits : acteurs,...</div> */}\r\n                {/* split permet de couper la date, la mettre en tableau. on garde que l'année */}\r\n                <div><span className=\"font-weight-bold\">Année de sortie : </span>{selected.release_date.split('-')[0]}</div>\r\n                <p>{selected.overview}</p>\r\n                <div><span className=\"font-weight-bold\">Note : </span>{selected.vote_average}</div>\r\n            </div>  \r\n        </div>\r\n    )\r\n}\r\nexport default Popup;","import React, { useState } from 'react';\nimport './App.css'\n// import Film from './Components/Film'\nimport NavBar from './Components/NavBar'\nimport Search from './Components/Search'\nimport Results from './Components/Results'\nimport Trending from './Components/Trending'\nimport Popup from './Components/Popup'\nimport axios from 'axios'\nimport './App.css'\n  function App() {\n// Déclare une nouvelle variable d'état. on a plusieurs états a gérer.\n// ici on l'a appelé state mais ca aurait pu être n'importe quoi\n//useState remplace this.state. on lui passent les états initiaux\n    let [state, setState] = useState({\n      s: \"\",// état de la recherche.String\n      results: [], // état du résultat de la recherche. Tableau (depuis l'api, fichier json)\n      selected: {}, // état de la popup. Objet\n      trends:[]\n    });\n    // const trending = (e) => {\n      axios('https://api.themoviedb.org/3/trending/movie/day?api_key=30b4239b5ea618dab97189fb606a4ed6&language=fr')\n      .then(({data}) => {\n        let trends = data; \n        setState(prevState => {\n          return { \n            //Spread synthaxe. on retourne l'objet this.state \n            ...prevState, \n          trends: trends.results}\n          });\n          \n      });\n    // }\n// déclaration de la variable {search} c'est elle qui va porter les données plus bas :\n// <Search recherche={recherche} search={search}/>\n  const search = (e) => {\n\n    //si l'évenement est stricte égale à la touche entrer est pressée alors\n    if(e.key === \"Enter\"){\n      // on va chercher dans l'api avec axios, tous les film en raport avec ce qui envoyé dans input\n      axios('https://api.themoviedb.org/3/search/movie?api_key=30b4239b5ea618dab97189fb606a4ed6&language=fr&query='+ state.s)\n      // on fait la boucle dans les composants  result(s).js\n      .then(({data}) => {\n        //quand il y a des données, results = ces données\n        let results = data;\n        // mettre l'état. \n        setState(prevState => {\n          return { \n            //Spread synthaxe. on retourne l'objet this.state \n            ...prevState, \n          //retourne l'état results qui est égale au array results du map (dans les functions result.js et results.js)\n          results: results.results}\n          //etat result: données.ancrage du tableau\n        })\n\n      });\n    }\n  }\n  // on déclare la var recherche qui servira en bas // <Search recherche={recherche} search={search}/>\n  const recherche = (e) =>{\n    let maRecherche = e.target.value;\n    // permet de changer l'état : l'état précédent prend  la valeur du input\n    setState( prevState => {\n      // et on retourne ce résultat dans l'état s\n      return{   \n        //Spread synthaxe. on retourne l'objet this.state    \n        ...prevState, \n        // l'état s prend la valeur de l'input\n        s: maRecherche}\n    });\n\n  }\n  const openpopup = (e, id)=> {\n    axios('https://api.themoviedb.org/3/movie/' + id + '?api_key=30b4239b5ea618dab97189fb606a4ed6&language=fr&query=iron')\n    .then(({data}) => {\n      let result = data; \n      setState(prevState => {\n        return { \n          //Spread synthaxe. on retourne l'objet this.state \n          ...prevState, \n        result: result}\n        });\n        \n    });\n    console.log(state.selected)\n\n  }\n\n  console.log(state.trends[0])\n    return (\n      <div className=\"App\">\n          <NavBar />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              {/* Le input et ses props */}\n              <Search recherche={recherche} search={search}/>\n              {/* Dans Results on affiche l'état de results: \n              résultat de la recherche  */}\n            {(typeof state.selected.title != \"undefined\") ? <Popup selected={state.selected}  /> : false}\n              {/* {( state.results !== []) ? <Results results={state.results} openpopup={openpopup} /> : <Trending trends={state.trends}/>} */}\n              <Results results={state.results} openpopup={openpopup} />\n              <div className=\"d-flex\">\n              <Trending trends={state.trends}/>\n\n              </div>\n            </div> \n\n          </div>\n        </div>\n      </div>\n      \n    );\n  \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}